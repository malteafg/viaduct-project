host alice

host bob

host chuck

assume for <- alice trusts bob

assume for <- bob trusts alice

fun main{}() where () : {(⊥<- & ⊤->)} {
    let $tmp@Local(host = chuck) = input bool from chuck;
    let $tmp_1@Commitment(receivers = {alice}, sender = chuck) = endorse $tmp to {(chuck & (alice & bob)<-)} from {chuck};
    val c_bet: bool{(chuck & (alice & bob)<-)}@Commitment(receivers = {alice}, sender = chuck) = $tmp_1;
    val length: int{((alice ⊓ bob) ⊓ chuck->)}@Replication(hosts = {alice, bob}) = 10;
    var a_min: int{(alice & bob<-)}@Local(host = alice) = 0;
    var b_min: int{(bob & alice<-)}@Local(host = bob) = 0;
    var i: int{((alice ⊓ bob) ⊓ chuck->)}@Replication(hosts = {alice, bob}) = 0;
    loop {
        let $tmp_2@Replication(hosts = {alice, bob}) = i;
        let $tmp_3@Replication(hosts = {alice, bob}) = length;
        let $tmp_4@Replication(hosts = {alice, bob}) = ($tmp_2 < $tmp_3);
        if ($tmp_4) {
            let $tmp_5@Local(host = alice) = a_min;
            let $tmp_6@Local(host = alice) = input int from alice;
            let $tmp_7@Local(host = alice) = (min($tmp_5, $tmp_6));
            a_min = $tmp_7;
            let $tmp_8@Local(host = bob) = b_min;
            let $tmp_9@Local(host = bob) = input int from bob;
            let $tmp_10@Local(host = bob) = (min($tmp_8, $tmp_9));
            b_min = $tmp_10;
            i += 1;
        } else {
            break;
        }
    }
    let $tmp_11@Local(host = alice) = a_min;
    let $tmp_12@Local(host = bob) = b_min;
    let $tmp_13@YaoABY(client = bob, server = alice) = ($tmp_11 > $tmp_12);
    let $tmp_14@Local(host = alice) = declassify $tmp_13 to {((alice ⊓ bob) ⊓ chuck->)};
    val a_wins: bool{((alice ⊓ bob) ⊓ chuck->)}@Local(host = alice) = $tmp_14;
    let $tmp_15@Local(host = alice) = a_wins;
    let $tmp_16@Replication(hosts = {alice, chuck}) = endorse $tmp_15 to {((alice ⊓ bob) ⊓ chuck)} from {((alice ⊓ bob) ⊓ chuck->)};
    val a_wins_trusted: bool{((alice ⊓ bob) ⊓ chuck)}@Replication(hosts = {alice, chuck}) = $tmp_16;
    let $tmp_17@Commitment(receivers = {alice}, sender = chuck) = c_bet;
    let $tmp_18@Replication(hosts = {alice, chuck}) = declassify $tmp_17 to {((alice ⊓ bob) ⊓ chuck)};
    val c_bet_public: bool{((alice ⊓ bob) ⊓ chuck)}@Replication(hosts = {alice, chuck}) = $tmp_18;
    let $tmp_19@Replication(hosts = {alice, chuck}) = c_bet_public;
    let $tmp_20@Replication(hosts = {alice, chuck}) = a_wins_trusted;
    let $tmp_21@Replication(hosts = {alice, chuck}) = ($tmp_19 && $tmp_20);
    let $tmp_22@Replication(hosts = {alice, chuck}) = c_bet_public;
    let $tmp_23@Replication(hosts = {alice, chuck}) = (!$tmp_22);
    let $tmp_24@Replication(hosts = {alice, chuck}) = a_wins_trusted;
    let $tmp_25@Replication(hosts = {alice, chuck}) = (!$tmp_24);
    let $tmp_26@Replication(hosts = {alice, chuck}) = ($tmp_23 && $tmp_25);
    let $tmp_27@Replication(hosts = {alice, chuck}) = ($tmp_21 || $tmp_26);
    val c_wins: bool{((alice ⊓ bob) ⊓ chuck)}@Replication(hosts = {alice, chuck}) = $tmp_27;
    let $tmp_28@Replication(hosts = {alice, chuck}) = c_wins;
    output $tmp_28 to alice;
    let $tmp_29@Replication(hosts = {alice, chuck}) = c_wins;
    output $tmp_29 to bob;
    let $tmp_30@Replication(hosts = {alice, chuck}) = c_wins;
    output $tmp_30 to chuck;
}
