host alice

host bob

fun main{}() where () : {(⊥<- & ⊤->)} {
    let $tmp@Local(host = bob) = input int from bob;
    let $tmp_1@ZKP(prover = bob, verifiers = {alice}) = endorse $tmp to {(bob & alice<-)} from {bob};
    val number: int{(bob & alice<-)}@ZKP(prover = bob, verifiers = {alice}) = $tmp_1;
    var tries: int{(alice ⊓ bob)}@Replication(hosts = {alice, bob}) = 0;
    var win: bool{(alice ⊓ bob)}@Replication(hosts = {alice, bob}) = false;
    loop {
        let $tmp_2@Replication(hosts = {alice, bob}) = tries;
        let $tmp_3@Replication(hosts = {alice, bob}) = ($tmp_2 < 5);
        let $tmp_4@Replication(hosts = {alice, bob}) = win;
        let $tmp_5@Replication(hosts = {alice, bob}) = (!$tmp_4);
        let $tmp_6@Replication(hosts = {alice, bob}) = ($tmp_3 && $tmp_5);
        if ($tmp_6) {
            let $tmp_7@Local(host = alice) = input int from alice;
            let $tmp_8@Local(host = alice) = declassify $tmp_7 to {((alice | bob)-> & alice<-)};
            val guess: int{((alice | bob)-> & alice<-)}@Local(host = alice) = $tmp_8;
            let $tmp_9@Local(host = alice) = guess;
            let $tmp_10@Replication(hosts = {alice, bob}) = endorse $tmp_9 to {(alice ⊓ bob)} from {((alice | bob)-> & alice<-)};
            val trusted_guess: int{(alice ⊓ bob)}@Replication(hosts = {alice, bob}) = $tmp_10;
            let $tmp_11@ZKP(prover = bob, verifiers = {alice}) = number;
            let $tmp_12@Replication(hosts = {alice, bob}) = trusted_guess;
            let $tmp_13@ZKP(prover = bob, verifiers = {alice}) = ($tmp_11 == $tmp_12);
            let $tmp_14@Replication(hosts = {alice, bob}) = declassify $tmp_13 to {(alice ⊓ bob)};
            win = $tmp_14;
            tries += 1;
        } else {
            break;
        }
    }
    let $tmp_15@Replication(hosts = {alice, bob}) = win;
    output $tmp_15 to alice;
    let $tmp_16@Replication(hosts = {alice, bob}) = win;
    output $tmp_16 to bob;
}
