host companyA

host companyB

assume for <- companyA trusts companyB

assume for <- companyB trusts companyA

fun main{}() where () : {(⊥<- & ⊤->)} {
    val storeCount: int{(companyA ⊓ companyB)}@Replication(hosts = {companyA, companyB}) = 500;
    var a_rev: int{(companyA & companyB<-)}@Local(host = companyA) = 0;
    var b_rev: int{(companyB & companyA<-)}@Local(host = companyB) = 0;
    var i: int{(companyA ⊓ companyB)}@Replication(hosts = {companyA, companyB}) = 0;
    loop {
        let $tmp@Replication(hosts = {companyA, companyB}) = i;
        let $tmp_1@Replication(hosts = {companyA, companyB}) = storeCount;
        let $tmp_2@Replication(hosts = {companyA, companyB}) = ($tmp < $tmp_1);
        if ($tmp_2) {
            let $tmp_3@Local(host = companyA) = input int from companyA;
            a_rev += $tmp_3;
            let $tmp_4@Local(host = companyB) = input int from companyB;
            b_rev += $tmp_4;
            i += 1;
        } else {
            break;
        }
    }
    let $tmp_5@Local(host = companyA) = a_rev;
    let $tmp_6@Local(host = companyB) = b_rev;
    let $tmp_7@YaoABY(client = companyB, server = companyA) = ($tmp_5 + $tmp_6);
    val total_market: int{(companyA & companyB)}@YaoABY(client = companyB, server = companyA) = $tmp_7;
    let $tmp_8@Local(host = companyA) = a_rev;
    let $tmp_9@Local(host = companyA) = (100 * $tmp_8);
    let $tmp_10@YaoABY(client = companyB, server = companyA) = total_market;
    let $tmp_11@YaoABY(client = companyB, server = companyA) = ($tmp_9 / $tmp_10);
    val a_share: int{(companyA & companyB)}@ArithABY(client = companyB, server = companyA) = $tmp_11;
    let $tmp_12@Local(host = companyB) = b_rev;
    let $tmp_13@Local(host = companyB) = (100 * $tmp_12);
    let $tmp_14@YaoABY(client = companyB, server = companyA) = total_market;
    let $tmp_15@YaoABY(client = companyB, server = companyA) = ($tmp_13 / $tmp_14);
    val b_share: int{(companyA & companyB)}@ArithABY(client = companyB, server = companyA) = $tmp_15;
    let $tmp_16@ArithABY(client = companyB, server = companyA) = a_share;
    let $tmp_17@ArithABY(client = companyB, server = companyA) = a_share;
    let $tmp_18@ArithABY(client = companyB, server = companyA) = ($tmp_16 * $tmp_17);
    let $tmp_19@ArithABY(client = companyB, server = companyA) = b_share;
    let $tmp_20@ArithABY(client = companyB, server = companyA) = b_share;
    let $tmp_21@ArithABY(client = companyB, server = companyA) = ($tmp_19 * $tmp_20);
    let $tmp_22@ArithABY(client = companyB, server = companyA) = ($tmp_18 + $tmp_21);
    let $tmp_23@Local(host = companyA) = declassify $tmp_22 to {(companyA ⊓ companyB)};
    val hhi: int{(companyA ⊓ companyB)}@Local(host = companyA) = $tmp_23;
    let $tmp_24@Local(host = companyA) = hhi;
    output $tmp_24 to companyA;
    let $tmp_25@Local(host = companyA) = hhi;
    output $tmp_25 to companyB;
}
