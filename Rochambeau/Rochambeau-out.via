host alice

host bob

fun main{}() where () : {(⊥<- & ⊤->)} {
    val num_turns: int{(alice ⊓ bob)}@Replication(hosts = {alice, bob}) = 3;
    var a_score: int{(alice ⊓ bob)}@Replication(hosts = {alice, bob}) = 0;
    var b_score: int{(alice ⊓ bob)}@Replication(hosts = {alice, bob}) = 0;
    let $tmp@Replication(hosts = {alice, bob}) = num_turns;
    val a_moves = Array[int]{(alice & bob<-)}@Commitment(receivers = {bob}, sender = alice)($tmp);
    let $tmp_1@Replication(hosts = {alice, bob}) = num_turns;
    val b_moves = Array[int]{(bob & alice<-)}@Commitment(receivers = {alice}, sender = bob)($tmp_1);
    var i: int{(alice ⊓ bob)}@Replication(hosts = {alice, bob}) = 0;
    loop {
        let $tmp_2@Replication(hosts = {alice, bob}) = i;
        let $tmp_3@Replication(hosts = {alice, bob}) = num_turns;
        let $tmp_4@Replication(hosts = {alice, bob}) = ($tmp_2 < $tmp_3);
        if ($tmp_4) {
            let $tmp_5@Replication(hosts = {alice, bob}) = i;
            let $tmp_6@Local(host = alice) = input int from alice;
            let $tmp_7@Commitment(receivers = {bob}, sender = alice) = endorse $tmp_6 to {(alice & bob<-)} from {alice};
            a_moves[$tmp_5] = $tmp_7;
            let $tmp_8@Replication(hosts = {alice, bob}) = i;
            let $tmp_9@Local(host = bob) = input int from bob;
            let $tmp_10@Commitment(receivers = {alice}, sender = bob) = endorse $tmp_9 to {(bob & alice<-)} from {bob};
            b_moves[$tmp_8] = $tmp_10;
            i += 1;
        } else {
            break;
        }
    }
    var turn: int{(alice ⊓ bob)}@Replication(hosts = {alice, bob}) = 0;
    loop {
        let $tmp_11@Replication(hosts = {alice, bob}) = turn;
        let $tmp_12@Replication(hosts = {alice, bob}) = num_turns;
        let $tmp_13@Replication(hosts = {alice, bob}) = ($tmp_11 < $tmp_12);
        if ($tmp_13) {
            let $tmp_14@Replication(hosts = {alice, bob}) = turn;
            let $tmp_15@Commitment(receivers = {bob}, sender = alice) = a_moves[$tmp_14];
            val a_move: int{(alice & bob<-)}@Commitment(receivers = {bob}, sender = alice) = $tmp_15;
            let $tmp_16@Replication(hosts = {alice, bob}) = turn;
            let $tmp_17@Commitment(receivers = {alice}, sender = bob) = b_moves[$tmp_16];
            val b_move: int{(bob & alice<-)}@Commitment(receivers = {alice}, sender = bob) = $tmp_17;
            let $tmp_18@Commitment(receivers = {bob}, sender = alice) = a_move;
            let $tmp_19@Replication(hosts = {alice, bob}) = declassify $tmp_18 to {(alice ⊓ bob)};
            val a_move_public: int{(alice ⊓ bob)}@Replication(hosts = {alice, bob}) = $tmp_19;
            let $tmp_20@Commitment(receivers = {alice}, sender = bob) = b_move;
            let $tmp_21@Replication(hosts = {alice, bob}) = declassify $tmp_20 to {(alice ⊓ bob)};
            val b_move_public: int{(alice ⊓ bob)}@Replication(hosts = {alice, bob}) = $tmp_21;
            let $tmp_22@Replication(hosts = {alice, bob}) = a_move_public;
            let $tmp_23@Replication(hosts = {alice, bob}) = (1 <= $tmp_22);
            let $tmp_24@Replication(hosts = {alice, bob}) = a_move_public;
            let $tmp_25@Replication(hosts = {alice, bob}) = ($tmp_24 <= 3);
            let $tmp_26@Replication(hosts = {alice, bob}) = ($tmp_23 && $tmp_25);
            val a_valid: bool{(alice ⊓ bob)}@Replication(hosts = {alice, bob}) = $tmp_26;
            let $tmp_27@Replication(hosts = {alice, bob}) = b_move_public;
            let $tmp_28@Replication(hosts = {alice, bob}) = (1 <= $tmp_27);
            let $tmp_29@Replication(hosts = {alice, bob}) = b_move_public;
            let $tmp_30@Replication(hosts = {alice, bob}) = ($tmp_29 <= 3);
            let $tmp_31@Replication(hosts = {alice, bob}) = ($tmp_28 && $tmp_30);
            val b_valid: bool{(alice ⊓ bob)}@Replication(hosts = {alice, bob}) = $tmp_31;
            let $tmp_32@Replication(hosts = {alice, bob}) = a_valid;
            let $tmp_33@Replication(hosts = {alice, bob}) = (!$tmp_32);
            let $tmp_34@Replication(hosts = {alice, bob}) = b_valid;
            let $tmp_35@Replication(hosts = {alice, bob}) = ($tmp_33 && $tmp_34);
            if ($tmp_35) {
                b_score += 1;
            } else {
                
            }
            let $tmp_36@Replication(hosts = {alice, bob}) = a_valid;
            let $tmp_37@Replication(hosts = {alice, bob}) = b_valid;
            let $tmp_38@Replication(hosts = {alice, bob}) = (!$tmp_37);
            let $tmp_39@Replication(hosts = {alice, bob}) = ($tmp_36 && $tmp_38);
            if ($tmp_39) {
                a_score += 1;
            } else {
                
            }
            let $tmp_40@Replication(hosts = {alice, bob}) = a_valid;
            let $tmp_41@Replication(hosts = {alice, bob}) = b_valid;
            let $tmp_42@Replication(hosts = {alice, bob}) = ($tmp_40 && $tmp_41);
            if ($tmp_42) {
                let $tmp_43@Replication(hosts = {alice, bob}) = a_move_public;
                let $tmp_44@Replication(hosts = {alice, bob}) = b_move_public;
                let $tmp_45@Replication(hosts = {alice, bob}) = ($tmp_43 < $tmp_44);
                let $tmp_46@Replication(hosts = {alice, bob}) = b_move_public;
                let $tmp_47@Replication(hosts = {alice, bob}) = ($tmp_46 < 3);
                let $tmp_48@Replication(hosts = {alice, bob}) = ($tmp_45 && $tmp_47);
                if ($tmp_48) {
                    b_score += 1;
                } else {
                    
                }
                let $tmp_49@Replication(hosts = {alice, bob}) = b_move_public;
                let $tmp_50@Replication(hosts = {alice, bob}) = a_move_public;
                let $tmp_51@Replication(hosts = {alice, bob}) = ($tmp_49 < $tmp_50);
                let $tmp_52@Replication(hosts = {alice, bob}) = a_move_public;
                let $tmp_53@Replication(hosts = {alice, bob}) = ($tmp_52 < 3);
                let $tmp_54@Replication(hosts = {alice, bob}) = ($tmp_51 && $tmp_53);
                if ($tmp_54) {
                    a_score += 1;
                } else {
                    
                }
                let $tmp_55@Replication(hosts = {alice, bob}) = a_move_public;
                let $tmp_56@Replication(hosts = {alice, bob}) = ($tmp_55 == 1);
                let $tmp_57@Replication(hosts = {alice, bob}) = b_move_public;
                let $tmp_58@Replication(hosts = {alice, bob}) = ($tmp_57 == 3);
                let $tmp_59@Replication(hosts = {alice, bob}) = ($tmp_56 && $tmp_58);
                if ($tmp_59) {
                    a_score += 1;
                } else {
                    
                }
                let $tmp_60@Replication(hosts = {alice, bob}) = b_move_public;
                let $tmp_61@Replication(hosts = {alice, bob}) = ($tmp_60 == 1);
                let $tmp_62@Replication(hosts = {alice, bob}) = a_move_public;
                let $tmp_63@Replication(hosts = {alice, bob}) = ($tmp_62 == 3);
                let $tmp_64@Replication(hosts = {alice, bob}) = ($tmp_61 && $tmp_63);
                if ($tmp_64) {
                    b_score += 1;
                } else {
                    
                }
            } else {
                
            }
            turn += 1;
        } else {
            break;
        }
    }
    let $tmp_65@Replication(hosts = {alice, bob}) = a_score;
    let $tmp_66@Replication(hosts = {alice, bob}) = b_score;
    let $tmp_67@Replication(hosts = {alice, bob}) = ($tmp_65 > $tmp_66);
    val a_wins: bool{(alice ⊓ bob)}@Replication(hosts = {alice, bob}) = $tmp_67;
    let $tmp_68@Replication(hosts = {alice, bob}) = a_wins;
    output $tmp_68 to alice;
    let $tmp_69@Replication(hosts = {alice, bob}) = a_wins;
    output $tmp_69 to bob;
}
