host alice

host bob

assume for <- alice trusts bob

assume for <- bob trusts alice

fun main{}() where () : {(⊥<- & ⊤->)} {
    let $tmp@Local(host = alice) = input int from alice;
    var a_secret: int{(alice & bob<-)}@Local(host = alice) = $tmp;
    let $tmp_1@Local(host = bob) = input int from bob;
    var b_secret: int{(bob & alice<-)}@Local(host = bob) = $tmp_1;
    let $tmp_2@Local(host = alice) = a_secret;
    let $tmp_3@Local(host = alice) = declassify $tmp_2 to {(alice ⊓ bob)};
    val declassified_secret: int{(alice ⊓ bob)}@Local(host = alice) = $tmp_3;
    let $tmp_4@Local(host = alice) = declassified_secret;
    let $tmp_5@Replication(hosts = {alice, bob}) = ($tmp_4 == 3);
    if ($tmp_5) {
        let $tmp_6@Local(host = alice) = a_secret;
        let $tmp_7@Local(host = bob) = b_secret;
        let $tmp_8@YaoABY(client = bob, server = alice) = ($tmp_6 == $tmp_7);
        let $tmp_9@Local(host = alice) = declassify $tmp_8 to {(alice ⊓ bob)};
        val declassified_secret_2: bool{(alice ⊓ bob)}@Local(host = alice) = $tmp_9;
        let $tmp_10@Local(host = alice) = declassified_secret_2;
        output $tmp_10 to alice;
    } else {
        
    }
}
