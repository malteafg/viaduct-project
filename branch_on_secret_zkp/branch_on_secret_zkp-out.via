host alice

host bob

assume for <- alice trusts bob

assume for <- bob trusts alice

fun main{}() where () : {(⊥<- & ⊤->)} {
    let $tmp@Local(host = bob) = input int from bob;
    var b_secret: int{(bob & alice<-)}@Local(host = bob) = $tmp;
    let $tmp_1@Local(host = bob) = b_secret;
    let $tmp_2@Local(host = bob) = declassify $tmp_1 to {(alice ⊓ bob)};
    val declassified_secret: int{(alice ⊓ bob)}@Local(host = bob) = $tmp_2;
    let $tmp_3@Local(host = bob) = declassified_secret;
    let $tmp_4@Local(host = bob) = ($tmp_3 == 5);
    if ($tmp_4) {
        let $tmp_5@Local(host = bob) = b_secret;
        let $tmp_6@Local(host = bob) = endorse $tmp_5 to {(bob & alice<-)} from {bob};
        var trusted_secret: int{(bob & alice<-)}@Local(host = bob) = $tmp_6;
        let $tmp_7@Local(host = bob) = trusted_secret;
        let $tmp_8@Local(host = bob) = ($tmp_7 + 2);
        trusted_secret = $tmp_8;
        let $tmp_9@Local(host = bob) = trusted_secret;
        output $tmp_9 to bob;
    } else {
        
    }
}
