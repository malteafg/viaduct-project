host alice

host bob

assume for <- alice trusts bob

assume for <- bob trusts alice

fun main{}() where () : {(⊥<- & ⊤->)} {
    val length: int{(alice ⊓ bob)}@Replication(hosts = {alice, bob}) = 100;
    var a_min: int{(alice & bob<-)}@Local(host = alice) = 0;
    var b_min: int{(bob & alice<-)}@Local(host = bob) = 0;
    var i: int{(alice ⊓ bob)}@Replication(hosts = {alice, bob}) = 0;
    loop {
        let $tmp@Replication(hosts = {alice, bob}) = i;
        let $tmp_1@Replication(hosts = {alice, bob}) = length;
        let $tmp_2@Replication(hosts = {alice, bob}) = ($tmp < $tmp_1);
        if ($tmp_2) {
            let $tmp_3@Local(host = alice) = a_min;
            let $tmp_4@Local(host = alice) = input int from alice;
            let $tmp_5@Local(host = alice) = (min($tmp_3, $tmp_4));
            a_min = $tmp_5;
            let $tmp_6@Local(host = bob) = b_min;
            let $tmp_7@Local(host = bob) = input int from bob;
            let $tmp_8@Local(host = bob) = (min($tmp_6, $tmp_7));
            b_min = $tmp_8;
            i += 1;
        } else {
            break;
        }
    }
}
