host alice

host bob

assume for <- alice trusts bob

assume for <- bob trusts alice

fun main{}() where () : {(⊥<- & ⊤->)} {
    let $tmp@Local(host = alice) = input int from alice;
    var a_secret: int{(alice & bob<-)}@Local(host = alice) = $tmp;
    let $tmp_1@Local(host = bob) = input int from bob;
    var b_secret: int{(bob & alice<-)}@Local(host = bob) = $tmp_1;
    let $tmp_2@Local(host = alice) = a_secret;
    let $tmp_3@Local(host = bob) = b_secret;
    let $tmp_4@YaoABY(client = bob, server = alice) = ($tmp_2 == $tmp_3);
    let $tmp_5@Local(host = alice) = declassify $tmp_4 to {(alice ⊓ bob)};
    val same: bool{(alice ⊓ bob)}@Local(host = alice) = $tmp_5;
    let $tmp_6@Local(host = alice) = same;
    output $tmp_6 to alice;
    let $tmp_7@Local(host = alice) = same;
    output $tmp_7 to bob;
}
